Coursera - Algorithms Part I
Week 1 - Interview Questions - Union Find

Question 3: Egg Drop

Suppose that you have an N-story building (with floors 1 through N) and plenty
of eggs. An egg breaks if it is dropped from floor T or higher and does not
break otherwise. Your goal is to devise a strategy to determine the value of T
given the following limitations on the number of eggs and tosses:

Version 0: 1 egg, ≤ T tosses.
Version 1: ~1lgN eggs and ~1lgN tosses.
Version 2: ~lgT eggs and ~2lgT tosses.
Version 3: 2 eggs and ~2sqrt(N) tosses.
Version 4: 2 eggs and ≤ c*sqrt(T) tosses for some fixed constant c.


Solutions:

Version 0
Try each floor starting from the bottom. The first floor that the egg breaks on
is the value of T.

public int findBreakingFloorV0(int[] floors) {
    for (int i = 0; i < floors.length; i++) {
        if (isEggBroken(floors[i])) {
            return floors[i]; // 鸡蛋在这层破碎
        }
    }
    return -1; // 没有破碎的楼层
}

Version 1
Use a binary search on the floors. First, try floor T/2. If the egg breaks, T
must be equal to T/2 or smaller. If the egg does not break, T must be greater
than T/2. Continue testing the mid-point of the subset of floors until T is
determined.

public int findBreakingFloorV1(int[] floors) {
    int low = 0;
    int high = floors.length - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (isEggBroken(floors[mid])) {
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    return low < floors.length ? floors[low] : -1;
}

Version 2
Start test at floor 0 and exponentially grow (2^t) floor number until first egg
breaks. The value of T must be between 2^t and 2^(t-1). This range can then
be searched in ~lgT tosses using the technique from version 1.

egg1, 5, 10 good, 15 bad, egg2 tests 11, 12, 13, 14

public int findBreakingFloorV3(int[] floors) {
    int interval = (int)Math.sqrt(floors.length);
    int prev = 0;
    int egg1 = interval;

    // 使用第一个鸡蛋以固定间隔测试
    while (egg1 < floors.length && !isEggBroken(floors[egg1])) {
        prev = egg1;
        egg1 += interval;
    }

    // 使用第二个鸡蛋在确定的区间内线性搜索
    for (int i = prev; i < egg1 && i < floors.length; i++) {
        if (isEggBroken(floors[i])) {
            return floors[i];
        }
    }

Version 3
Test floors in increments of sqrt(N) starting from floor 0. When the egg breaks
on floor t, return to the previous test floor t-1 and increment by each floor.
The remaining sqrt(N) tests will be enough to check each floor between floor t-1
and t. The floor that breaks will be the value of T. (combine version 0 and version 1 -> sqr)

10, 20, 30, ...
if egg1 breaks at 10, egg2 tests 1,... ,9, in total 10
if egg1 10, 20, ...90 good, 100 bad, egg2 test 91, ... 99, in total 10

-> Drop(Egg1) + Drop(egg2) is always the same;
if egg1 breaks at 10, egg2 tests 1,... ,9, in total 10
if egg1 breaks at 19 (10) , egg2 tests 11,... ,19, in total 10
if egg1 breaks at 28 (10, 20) , egg2 tests 21,... ,27, in total 10

each drop of Egg1 takes one more step(previous step) so egg2 is allowed one fewer steps;

x + (X - 1) + ... + 1 = 100;
x = 13.65

if X = 13 x + (X - 1) + ... + 1 = 91;
egg2 will tests 92, ..., 100
if X = 14 x + (X - 1) + ... + 1 = 99;
egg2 tests 100 if egg1 is good at 99


[算法-EggDrop](https://www.bilibili.com/video/BV1d24y1J7gg/?spm_id_from=333.337.search-card.all.click&vd_source=5adf1beea08676da3812ff25c1e41f5f)
public int findBreakingFloorV3(int[] floors) {
    int interval = 14;
    int prev = 0;
    int egg1 = interval;

    // 使用第一个鸡蛋以固定间隔测试, drop egg1 at decreasing intervals of 14 floors;
    while (egg1 < floors.length && !isEggBroken(floors[egg1])) {
        prev = egg1;
        egg1 += interval;
    }

    // 使用第二个鸡蛋在确定的区间内线性搜索, drop egg2 at 1 unit increments
    for (int i = prev; i < egg1 && i < floors.length; i++) {
        if (isEggBroken(floors[i])) {
            return floors[i];
        }
    }
    return -1; // 如果没有找到破碎的楼层
}


Version 4

This version is similar to version 3, but it optimizes the choice of intervals
to minimize the number of tosses in the worst-case scenario.
One method is to use a variable interval,
for example, starting with an interval of sqrt(T) and then gradually decreasing it.
